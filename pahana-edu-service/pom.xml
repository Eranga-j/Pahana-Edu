<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.pahanaedu</groupId>
  <artifactId>pahana-edu-service</artifactId>
  <version>1.0.0</version>
  <packaging>war</packaging>
  <name>Pahana Edu Service</name>

  <properties>
    <!-- Build -->
    <maven.compiler.release>21</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Versions -->
    <jakartaee.version>10.0.0</jakartaee.version>
    <mysql.version>8.4.0</mysql.version>
    <junit.version>5.10.2</junit.version>
    <surefire.version>3.2.5</surefire.version>
    <jacoco.version>0.8.11</jacoco.version>
  </properties>

  <!-- ONE dependencies block only -->
  <dependencies>
    <!-- Jakarta EE APIs provided by the app server -->
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <version>${jakartaee.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- MySQL driver:
         - Kept as runtime so your DAOs can use JDBC fallback without copying the JAR to domain/lib.
         - If your server already provides the driver, you can switch to <scope>provided</scope>. -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>${mysql.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
  <groupId>com.mysql</groupId>
  <artifactId>mysql-connector-j</artifactId>
  <version>${mysql.version}</version>
  <scope>test</scope>
</dependency>


    <!-- JUnit 5 (API + engine) -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Test-scope MySQL driver for unit tests -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>${mysql.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>21</release>
        </configuration>
      </plugin>

      <!-- JUnit 5 + JDBC props for tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <useModulePath>false</useModulePath>
          <systemPropertyVariables>
            <PAHANA_JDBC_URL>jdbc:mysql://127.0.0.1:3306/pahanaedu?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</PAHANA_JDBC_URL>
            <PAHANA_JDBC_USER>root</PAHANA_JDBC_USER>
            <PAHANA_JDBC_PASS></PAHANA_JDBC_PASS>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!-- Optional: coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.version}</version>
        <executions>
          <execution>
            <goals><goal>prepare-agent</goal></goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals><goal>report</goal></goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.4.0</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
